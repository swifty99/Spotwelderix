substitutions:
  plug_name: "spottest"
  ADCa_CHANNEL_CURR:  "5"
  ADC_CHANNEL_PROBE_PLUS: "6"
  ADC_CHANNEL_PROBE_NEG:  "7"
  # these are the channels on direct HW access. see ESP32 data sheet.
  # this SW does not use HAL for ADC and Gate IO. These add intolerable delays.
  
esphome:
  name: ${plug_name}
  project:
    name: "kipping.spotwelderix"
    version: "0.3.3"
  platform: ESP32
  board: nodemcu-32s  
  on_boot:
    priority: 750 #switches available
    then:
      - switch.turn_on: power_on 
      - lambda:  id(my_preweld_time_usec) = id(my_preweld_time_usec_number).state;  
      - lambda: id(my_preweldpause_time_usec) = id(my_preweldpause_time_usec_number).state;
      - rtttl.play:
          rtttl: "two short:d=4,o=5,b=100:16e6,16e6"



  includes:
    - my_welder.h


wifi:
  networks:
  - ssid: BitPups
    password: Schnittlauch
  - ssid: "Bit4Me"
    password: !secret wifi_pw_home 
  
  manual_ip:
    # Set this to the IP of the ESP
    static_ip: 192.168.42.86
    # Set this to the IP address of the router. Often ends with .1
    gateway: 192.168.42.1
    # The subnet of the network. 255.255.255.0 works for most home networks.
    subnet: 255.255.255.0  

  # Enable fallback hotspot (captive portal) in case wifi connection fails
  ap:
    ssid: "${plug_name} Fallback Hotspot"
    password: "Schnittlauch"

captive_portal:



logger:
  level: DEBUG
  logs:
    adc: ERROR
    sensor: INFO

api:
  reboot_timeout : 0s

ota:


web_server:
  port: 80

time:
  - platform: homeassistant
  #- platform: sntp
    id: sntp_time
    # servers:
    #   - 0.de.pool.ntp.org
    #   - 3.de.pool.ntp.org
    on_time:
      # Every 5 minutes
      - seconds: /2
        then:
          - script.execute: error_handler

dallas:
  - pin: 13

spi:
  clk_pin: 17
  mosi_pin: 16
  miso_pin: 15


globals:
  - id: my_global_energy_target
    type: unsigned int
    restore_value: no
    initial_value: '31'

    # Weld.h stuff:
    
  - id: my_weld_time
    type: float
    restore_value: no
    initial_value: '0'

  - id: my_preweld_time_usec
    type: unsigned int
    restore_value: no
    initial_value: '500'

  - id: my_preweldpause_time_usec
    type: unsigned int
    restore_value: no
    initial_value: '500'

  - id: my_weld_max_p
    # peak power
    type: float
    restore_value: no
    initial_value: '0'

  - id: my_test
    # peak power
    type: float
    restore_value: yes
    initial_value: '0'

  - id: my_weld_count
    type: unsigned int
    restore_value: no
    initial_value: '0'

  - id: my_weld_energy
    type: float
    restore_value: no
    initial_value: '0'
    
  - id: my_preweld_resistance
    type: float
    restore_value: no
    initial_value: '0'

  - id: my_weld_resistance
    type: float
    restore_value: no
    initial_value: '0'

  - id: my_probe_resistance
    type: float
    restore_value: no
    initial_value: '4'

  - id: my_weld_energy_target_intern
    type: float
    restore_value: no
    initial_value: '1'

  - id: my_weld_request
    type: unsigned int
    restore_value: no
    initial_value: '0'


  - id: my_global_weld_powerflow
    type: int[30]
    restore_value: no

  - id: raw_to_voltage_factor
    type: float
    restore_value: yes
    initial_value: '0.005'


  - id: error_handler_update_req
    type: int

  - id: error_handler_error_active
    type: int[100]
    

    # writes the most prior error to text me
script:
  - id: error_handler
  
    then:
      - lambda: |-
          // only update text if something happende
          if (id(error_handler_update_req) == 0) return;

          // check individual errors
          if (id(error_handler_error_active)[0] == 1)  id(error_handler_text).publish_state("E: Calibrate Voltage");
          else
            id(error_handler_text).publish_state("No Error");
          id(error_handler_update_req) =0;

  - id: shutdown_script
    then:
      - delay: 1 sec
      # display goodbye
      - switch.turn_off: power_on 
      - button.press: shutdown_button     

  # UI vars

number:

          
  - platform: template
    id:  measured_voltage
    min_value: 11
    max_value: 13
    step: 0.1
    optimistic: true
    name: "Measured battery voltage (adjust to)"
    on_value:
      then:
        #copy number to global to access it in my_welder.h
        lambda:  id(raw_to_voltage_factor) = id(measured_voltage).state / id(probe_plus_voltage_raw).state;


        
  - platform: template
    id:  energy_target
    min_value: 1
    max_value: 100
    step: 1
    optimistic: true
    restore_value: yes   
    name: "Energy Target"
    on_value:
      then:
        #copy number to global to access it in my_welder.h
        lambda:  id(my_weld_energy_target_intern) = id(energy_target).state;

        
  - platform: template
    id:  my_preweld_time_usec_number
    min_value: 0
    max_value: 2000
    step: 100
    optimistic: true
    
    restore_value: yes   
    name: "µsec preweld time"
    on_value:
      then:
        #copy number to global to access it in my_welder.h
        lambda:  id(my_preweld_time_usec) = id(my_preweld_time_usec_number).state;



  - platform: template
    id:  my_preweldpause_time_usec_number
    min_value: 0
    max_value: 25000
    step: 250
    optimistic: true
    
    restore_value: yes   
    name: "µsec preweld pause time"
    on_value:
      then:
        - logger.log: "hi"
        #copy number to global to access it in my_welder.h
        - lambda:  !lambda |-
            id(my_preweldpause_time_usec) = id(my_preweldpause_time_usec_number).state;
            ESP_LOGI("custom", "Value of my number: %f", (float) id(my_preweldpause_time_usec_number).state );




        




sensor:




# Extra sensor to keep track of plug uptime
  - platform: uptime
    name: '${plug_name}_Uptime'
    unit_of_measurement: Tage
    update_interval: 300s
    filters:
      - multiply: 0.000011574
      
  - platform: wifi_signal
    name: "${plug_name}_WiFi_Signal"
    update_interval: 60s


  - platform: dallas
    address: 0xcb0d4c2608430028
    name: "PCB Temperature"
    id: mytempsens

  - platform: rotary_encoder
    name: "Rotary Encoder"
    resolution: 2
    pin_a: 36
    pin_b: 39



  - platform: adc
    pin: 32
    id: supply_volt
    name: "Supply voltage"
    attenuation: 11db
    update_interval: 80ms
    filters:

      - multiply: 7.866
      # * id(my_weld_voltref_adj); 
      - sliding_window_moving_average:
          window_size: 2
          send_every: 2        
      - or:
        - delta: 0.3
        - throttle: 10sec  



  - platform: adc
    pin: 35
    id: probe_minus
    name: "Probe volt neg pole"
    attenuation: 11db
    update_interval: 200ms
    unit_of_measurement: "V"
    filters:
      - multiply: 6.44
      - sliding_window_moving_average:
          window_size: 3
          send_every: 2
    on_value_range:
      above: 10
      then:
        - if:
            condition:
              lambda: 'return id(auto_weld_enable).state;'
            then:         
              - lambda:  !lambda |-
                  ESP_LOGI("custom", "Initiation Auto Weld" );
              - rtttl.play:
                  rtttl: "two short:d=4,o=5,b=100:16e6,16e6"
              # wait until buzzer finished
              - while:
                  condition:
                    rtttl.is_playing      
                  then:
                  - delay: 0.05s

              - lambda: id(my_weld_request) = 1;
                  

                

          
  - platform: adc
    pin: 34
    id: probe_plus_voltage_raw
    #name: "Probe Voltage + RAW"
    raw: true
    attenuation: 11db    
    update_interval: 1s
    unit_of_measurement: "V"

  - platform: template
    id: batt_plus_voltage
    name: "Probe Voltage +"
    lambda: |-
      // if nan and not already set run it
      if (isnan(id(raw_to_voltage_factor)) && id(error_handler_error_active)[0]  ==0) {
        id(error_handler_error_active)[0]  =1;
        id(error_handler_update_req) = 1;
      }
      return id(raw_to_voltage_factor)  * id(probe_plus_voltage_raw).state  ;
      
    update_interval: 1s
    unit_of_measurement: "V"


# configured only to set attenuation
  - platform: adc
    pin: 33
    id: curradc
    name: current
    attenuation: 11db
    raw: true
    unit_of_measurement: "A"
    filters:
      - multiply: 0.3382
    update_interval: 2s
  






binary_sensor:

  - platform: custom
    lambda: |-
      auto my_welder = new MyWelder();
      App.register_component(my_welder);
      return {my_welder};

    binary_sensors:
      name: "My Custom Weld Function"
      id: my_custom_welder_ui_req
      on_state:
        then:
          if: 
            condition:
              lambda: 'return id(my_custom_welder_ui_req).state > 0;'
            then:
              - component.update: my_display 
              - logger.log: "update rq reset"

  - platform: gpio
    id: pullup__
    pin:
      number: 13
      mode: INPUT_PULLUP
    filters:
      - delayed_on: 100ms

  - platform: gpio
    id: foot_switch
    name: "Foot switch"
    pin:
      number: 4
      mode: INPUT_PULLUP
      inverted: true
    filters:
      - delayed_on: 100ms   
    on_press:
      then:
        lambda: id(my_weld_request) = 1;

  # - platform: gpio
  #   id: pullup2__
  #   pin:
  #     number: 19
  #     mode: INPUT_PULLUP
  #   filters:
  #     - delayed_on: 100ms

  - platform: gpio
    id: user_switch
    name: "User Push"
    pin:
      number: 23
      inverted: true
      mode: INPUT_PULLUP
          
    filters:
      - delayed_on: 100ms



button:

  # Calibration "buttons to adjust ADC values"
#  - platform: template
#    name: "Calibrate Step 1: Probe Shorted"
#    id: calibrate_volt_0v

  - platform: template
    #inverted: True
    id: welder
    name: "Weld Now!"  
    on_press:
      lambda: id(my_weld_request) = 1;

  - platform: shutdown
    id: shutdown_button
    on_press:
      - switch.turn_off: power_on

  - platform: template
    name: "Shutdown Spotwelderix"
    id: shutdown_template    


switch:
  - platform: gpio
    pin: 22
    #inverted: True
    id: power_on
    name: "Power"  
    on_turn_off:
      - button.press: shutdown_button

  - platform: gpio
    pin: 27
    #inverted: True
    id: weld_raw
    #name: "Weld it! RAW!!!"  
    # do not remove, needed to set pin27 as output

  - platform: template
    name: "Auto Weld"
    optimistic: true
    id: auto_weld_enable




output:
  - platform: ledc
    pin: GPIO26
    id: rtttl_out


rtttl:
  output: rtttl_out

text_sensor:
  - platform: template
    id: error_handler_text
    name: "Error message"
    on_value:         
      - component.update: my_display 

  
font:
  - file: 'fonts/DosisSB.ttf'
    id: dosis_sb_48
    size: 48
  - file: 'fonts/DosisSB.ttf'
    id: dosis_sb_20
    size: 20
  - file: 'fonts/DosisSB.ttf'
    id: dosis_sb_96
    size: 92
  - file: 'fonts/DosisSB.ttf'
    id: dosis_sb_72
    size: 72

display:
  - platform: waveshare_epaper
    id: my_display
    cs_pin: 5
    dc_pin: 18
    busy_pin: 21
    reset_pin: 19
    model: 1.54inv2
    full_update_every: 10
    rotation: 90
    update_interval: 10 sec
    lambda: |-
      // api disc https://esphome.io/api/display__buffer_8h.html
      // Topr Row_ Peek P and time  my_weld_time
      it.printf(0, -4, id(dosis_sb_20),  "Peak: %.0fW",   id(my_weld_max_p));
      it.printf(it.get_width(), -4, id(dosis_sb_20), TextAlign::TOP_RIGHT , "%.1f ms",   id(my_weld_time));



      // show energy and target
      it.printf(it.get_width()/2 +40, it.get_height()/2 +48, id(dosis_sb_48), TextAlign::BOTTOM_RIGHT , "%.1f",  id(my_weld_energy) );
      it.printf(it.get_width()/2 + 48, it.get_height()/2 +48 -10, id(dosis_sb_20), TextAlign::BOTTOM_LEFT , "J");
      
      it.printf(it.get_width()/2 +20, it.get_height()/2 +40, id(dosis_sb_20), TextAlign::CENTER_HORIZONTAL  , "Target E: %.1f J",   id(energy_target).state);

      // draw the power curve
      
      // bottom row Temp / Batt_
      it.printf(0, it.get_height() - 20, id(dosis_sb_20),  "%.1f°C  %.1f V",  id(mytempsens).state,   id(batt_plus_voltage).state);
      it.printf(it.get_width(), it.get_height() - 20, id(dosis_sb_20), TextAlign::RIGHT , "weld %d",   id(my_weld_count));
  
      // optinal print error message 
      std::string val = id(error_handler_text).state;
      it.printf(it.get_width()/2, 40, id(dosis_sb_20), TextAlign::CENTER , "%s",  val.c_str() );
      


